<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Github Pages如何自定义域名]]></title>
    <url>%2F2017%2F07%2F01%2FGithub-Pages%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%2F</url>
    <content type="text"><![CDATA[将自己的博客代码托管到Github上时，默认域名为 https://gwemz.github.io ，如何给其添加自定义域名？如通过 http://gwem.tk 这样的顶级域名进行访问？ 首先需要ping gwemz.github.io的ip地址（在后边DNS域名解析地址的时候会用到）如图所示： 得到地址之后进入dnspod中进行设置，添加A记录(这儿需要添加两条A记录，一条记录为*，另一条记录为@)，之前就是这一步遗漏，致使无法正确解析出域名: 需要在github项目中建立CNAME文件并填入域名，这儿不需要添加www，然后进行同步 这儿值得注意的是因为使用的是DNSPOD域名解析，故而在DNSPOD中设置域名解析之前需要在Freenom（其它域名申请地址原理类似）中设置选择自定义的DNS服务器，DNS服务器为DNSPOD中默认给的服务器f1g1ns1.dnspod.net.和f1g1ns2.dnspod.net. 最后，输入你的域名，便会发现域名已经成功和你的项目绑定了！！！]]></content>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3属性]]></title>
    <url>%2F2017%2F06%2F27%2FCSS3%E5%B1%9E%E6%80%A7%2F</url>
    <content type="text"><![CDATA[CSS3、CSS4以及其他传说CSS 1 的规范由 Håkon Wium Lie 和 Bert Bos 发表于 1996 年，它非常短，而且比较简单。它的内容少到用一个 HTML 页面就足以呈现了，即使用 A4 纸打印出来也只需要 68 页。 CSS 2 发表于 1998 年，它的定义更加严格，囊括了更多的功能，而且增加了两名编辑：Chris Lilley 和 Ian Jacobs。此时，规范的篇幅暴增到了480 页打印纸，人们已经无法把它完整地记忆下来了。 尽管“CSS3”这个名词非常流行，但它实际上并没有在任何规范中定义过。这一点跟 CSS 2.1 或更早的 CSS 1 不一样。真正的情况是，绝大多Web 标准 ：是敌还是友 5数编辑在提到这个词时，指的是一个非正式的集合，它包括 CSS 规范第三版（Level 3）再加上一些版本号还是 1 的新规范。尽管在哪些规范应该归入CSS3 的问题上，编辑们达成了一定的共识，但我们也不得不面对现实：由于 CSS 的各个模块在近些年里以不同的速度在推进，我们已经越来越难以把这些规范以 CSS3、CSS4 这样的方式来划分了，而且这样也难以被大众理解和接受。]]></content>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[禅心慧语]]></title>
    <url>%2F2017%2F06%2F16%2F%E7%A6%85%E5%BF%83%E6%85%A7%E8%AF%AD%2F</url>
    <content type="text"><![CDATA[语录摘录于2017-3-31杭州永福禅寺 无所得，即是得。以是得，无所得。 ————《大般若经》 心情是一条河，它的状态取决于它的深度。深水沉静，浅水喧哗。心量太小，小石头也能激起心情的浪花；心量大了，才能容得下暗藏的礁石。生活中，干扰我们心情的，没多少是大事。如同江河中的浪花，很多都不是庞然大物激起的。见多识广了，心胸就开阔了，心量就大了，心也就容易宁静了。 人生在世，往往会因这样或那样的伤害而心痛不已。罗素说，累累伤痕是生命给你的最好礼物。笑而不语是一种豁达。朋友间的戏谑，遭人误解后的无奈，过多的言辞申辩反而让人觉得华而不实，倒不如留下一抹微笑，任他人做评，有时一个微笑可以让两个宿怨之人冰释前嫌。 在这个世界上，没有一劳永逸，完美无缺的选择。你不可能同时拥有春花和秋月，不可能同时拥有硕果和繁花。你不可能所有的好处都是你的。你要学会权衡利弊，学会放弃一些什么，然后才能得到一些什么。你要学会接受命的残缺和悲哀，然后，心平气和。因为，这就是人生。 走在路上，挫折是难免的，低潮时必然的，孤独与寂寞是如影随形的；总有被人误解的时候，总有寄人篱下的时候，总有遭人诽谤和暗算的时候。这些时候，要知道潮涨潮落、波谷波峰的道理，只要你能够耐心等待，受得了折磨，守得住底线，一切都会证明，生活不会抛弃你，命运不会舍弃你。 凡事不可能一帆风顺。“随缘自适”。随缘是一种进取，是智者的行为，愚者的借口。随不是跟随，是顺其自然，不怨恨、不躁进、不过度、不强求；随不是随便，是把握机缘，不悲观、不刻板、不慌乱，不忘形；随是一种达观，是一种洒脱，是一份人生的成熟，一份人情的练达。 认识一个人靠缘分；了解一个人靠耐心；征服一个人靠智慧；处好一个人靠包容。人，相互帮扶才感到温暖；事，共同努力才感到简单；路，有伴同行才感到平坦；友，相互牵挂才感到情深；坚持与人为善，不遗余力的成就他人，也将在不知不觉中成就自己。一人亦人，众人为天；谋事在人，成事在天。 狮子不怕孤独，所以强大；羚羊喜欢群居，因为弱小。人生无处不修行，能在孤独中心静如水，才能在纷扰里安然无恙。人生来就是孤独的，不要奢望能够依靠谁，哪怕是自亲自爱。越是喧嚣处，往往更孤独。心系一处，自走自路。孤独是人生必走的路、必吃的苦。苦到尽头，甘自来。 每个人的身上，都依附着两个自己：好的自己和坏的自己。让积极打败消极，让高尚打败鄙陋，让真诚打败虚伪，让宽容打败计较，让快乐打败忧郁，让勤奋打败懒惰，让坚强打败脆弱。只要你愿意，你就能做最好的自己。 同是一块石头，一半做成了佛像，一半做成了台阶。一天，台阶不服气的问佛像：“我们本是一块石头，凭什么人们都踩着我，而去朝拜你呢？”佛说：“因为你只挨了一刀，而我经历了千刀万割。”人生亦如此，经得起打磨，耐得起寂寞。 人生有两种境界：一是痛而不言，二是笑而不语。痛而不言是一种智慧，人生在世，往往会因为这样或那样的伤害而心痛不已。对坚强的人来说，累累伤痕是生命赐予的最好的礼物；笑而不语是一种豁达，朋友间的戏虐，遭人误解后的无奈，过多的言辞申辩反让人觉得华而不实，莫不如留下一抹微笑，任他人做评。 人生有四苦：一是看不透。看不透人际中的纠、争斗后的隐伤，喧嚣中的平淡、繁华后的宁静。二是舍不得。舍不得曾今的精彩、不逮的岁月，居高时的虚荣、得意处的掌声。三是输不起。输不起一时的情感之失，输不起一截人生失败。四是放不下。放不下已经走远的人和事，放不下早已尘封的是与非。 人与人的差距，表面上看是财富的差距，实际上是福报的差距；表面上看是人脉的差距，实际上是人品的差距；表面上看是气质的差距，实际上是涵养的差距；表面上看是容貌的差距，实际上是心地的差距；表面上看是人与人都差不多，内心境界却大不相同。]]></content>
      <tags>
        <tag>杂文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VueJS研究]]></title>
    <url>%2F2017%2F06%2F15%2FVueJS%E7%A0%94%E7%A9%B6%2F</url>
    <content type="text"><![CDATA[介绍Vue.js是一套构建用户界面的渐进式框架。与其他重量级框架不同的是，Vue采用自底向上增量开发的设计。Vue的核心库只关注视图层，他不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与单文件组件和Vue生态系统支持的库结合使用时，Vue也完全能够为复杂的单页应用程序提供驱动。 官方网站 什么是Vue.js 它是一个轻量级的MVVM框架 数据驱动+组件化的前端开发 GitHub超过25K+的Star数，社区完善引入方式 &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt; 声明式渲染12345678910&lt;div id=&quot;app&quot;&gt; &#123;&#123; message &#125;&#125;&lt;/div&gt;var app = new Vue(&#123; el: &apos;#app&apos;, data: &#123; message: &apos;Hello Vue!&apos; &#125;&#125;) Hello Vue! 绑定Dom元素属性：123456789101112&lt;div id=&quot;app-2&quot;&gt; &lt;span v-bind:title=&quot;message&quot;&gt; 鼠标悬停几秒钟查看此处动态绑定的提示信息！ &lt;/span&gt;&lt;/div&gt;var app2 = new Vue(&#123; el: &apos;#app-2&apos;, data: &#123; message: &apos;页面加载于 &apos; + new Date() &#125;&#125;) 鼠标悬停几秒钟查看此处动态绑定的信息！ 条件与循环条件12345678910&lt;div id=&quot;app-3&quot;&gt; &lt;p v-if=&quot;seen&quot;&gt;现在你看到我了&lt;/p&gt;&lt;/div&gt;var app3 = new Vue(&#123; el: &apos;#app-3&apos;, data: &#123; seen: true &#125;&#125;) 现在你看到我了 循环123456789101112131415161718&lt;div id=&quot;app-4&quot;&gt; &lt;ol&gt; &lt;li v-for=&quot;todo in todos&quot;&gt; &#123;&#123; todo.text &#125;&#125; &lt;/li&gt; &lt;/ol&gt;&lt;/div&gt;var app4 = new Vue(&#123; el: &apos;#app-4&apos;, data: &#123; todos: [ &#123; text: &apos;学习 JavaScript&apos; &#125;, &#123; text: &apos;学习 Vue&apos; &#125;, &#123; text: &apos;整个牛项目&apos; &#125; ] &#125;&#125;) 1.学习JavaScript2.学习Vue3.整个牛项目 处理用户输入12345678910111213141516&lt;div id=&quot;app-5&quot;&gt; &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt; &lt;button v-on:click=&quot;reverseMessage&quot;&gt;逆转消息&lt;/button&gt;&lt;/div&gt;var app5 = new Vue(&#123; el: &apos;#app-5&apos;, data: &#123; message: &apos;Hello Vue.js!&apos; &#125;, methods: &#123; reverseMessage: function () &#123; this.message = this.message.split(&apos;&apos;).reverse().join(&apos;&apos;) &#125; &#125;&#125;) Vue基本的路由结构Vue-cli是Vue的脚手架工具Vue-cli GitHub地址 项目创建： 全局安装：cnpm install --global vue-cli创建一个基于webpack的新项目：vue init webpack my-project安装依赖：cd my-projectnpm installnpm run dev]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React Native研究]]></title>
    <url>%2F2017%2F06%2F05%2FReactNative%2F</url>
    <content type="text"><![CDATA[如何搭建开发环境？参考文献]]></content>
      <tags>
        <tag>react native</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[A-star算法的研究与应用]]></title>
    <url>%2F2017%2F06%2F02%2Fastar%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6%2F</url>
    <content type="text"><![CDATA[A-star算法的研究与应用搜索区域(The Search Area)我们假设某人想从A点到达B点，一堵墙把它们分开了。如下图所示，绿色是开始点A，红色是结束点B，而蓝色填充的方块是中间的墙。 你应该注意的第一件事是，我们把搜索区域分割成了方块的格子。简化搜索区域，如你目前完成的那样，这是寻路的第一步。这个特殊方法把搜索区域简化成了一个二维数组。数组的每一个项目代表了格子里的一个方块，它的状态记录成可行走和不可行走。通过计算出从A到达B应该走哪些方块，就找到了路径。一旦路径找到，我们的人从一个方块的中心移动到下一个方块的中心，直到抵达目标。 这些中心点称作“节点”。当你在其它地方阅读关于寻路时，你将经常发现人们讨论节点。为什么不直接把它们认为是方块呢？因为有可能你要把你的寻路区域以非方块的东西来分割。它们可能是矩形，六角形，或任何形状，真的。而节点可以放到形状内的任何位置。在中心，或者沿着边缘，或其它地方。然而我们使用这个系统，因为它最简单。 开始搜索Starting the Search一旦我们把搜索区域简化成了可以管理的大量节点，就象我们上面所做的那样采用格子的布局，下一步就是引导一个搜索来找出最短路径。在A*寻路的做法，我们从开始点A做起，检查它周围的方块，并且向外普通的搜索，直到找到目标。 我们这样开始搜索： 从开始点A起，添加它到待考虑的方块的“开放列表”。开放列表有点象购物列表。此时只有一个项目在里面，但很快我们会得到更多。它包含了你可能取用的沿途的方块，也可能不用它。基本上，这是需要检查的方块的列表。 观察开始点邻近的所有可到达或可行走的方块，忽略有墙，水或其他非法地形的方块。也把它们添加到开放列表。对每一个方块，保存A 点作为它们的“父亲”。这个父亲方块在跟踪路径时非常重要。后面会更多的解释。 把开始方块A从开放列表中取出，并放到“封闭列表”内，它是所有现在不需要再关注的方块的列表。 在此，你应该有了类似下图的东西。在这个图中，中间的深绿色的方块就是开始方块。它有浅蓝色的外框，表示它被添加到封闭列表了。所有的相邻方块现在都进入要检查的方块的开放列表中了，它们有浅绿的外框。每一个都有灰色的指针指回它的父亲，它就是开始方块。 下一步，我们从开放列表中，选出一个相邻的方块，然后多多少少重复早先的过程。但是我们选择哪一个呢？具有最小F值的那个。 路径排序Path Scoring找到形成路径的方块的关键是下面的等式： F = G + H 这里 G = 从开始 点A到格子中给定方块的移动代价，沿着到达该方块而生成的那个路径。 H = 从格子中给定 的方块到最终目标 B点的评估移动代价。这种方式通常称作试探法，有点让人混乱。因为这是一个猜测，所以得到这个称谓。在找到路径之前，我们真的不知道实际的距离，因为途中有各种东西（墙，水，等等）。在本教程里给出了一种计算H的方法，但在网上你能找到很多其他的文章。 我们需要的路径是这样生成的：反复的遍历开放列表，选择具有最小F值的方块。 如上所述，G是经由到达它的路径，从开始点到给定方块的移动代价。我们为每个水平/垂直的移动指定代价为10，而斜角的移动代价为14.我们使用这些值，是因为斜角的距离是2的平方根，或者大概是1.414倍的水平/垂直的移动代价。出于简化的目的使用了10和14。比例大致是正确的，而我们却避免了方根和小数的计算。倒不是我们没有能力或者不喜欢数学，使用这些数字也能让计算更快一些。以后你就会发现，如果不使用这些技巧，寻路的计算非常慢。 既然我们沿着给定方块的路径来计算G的值，找出那个方块G值的方法就是找到其父亲的G值，再加上10或者14而得，这依赖于它处于其处于父亲的斜角或者直角(非斜角)而定。这在本例后面会更加清晰，随着我们从开始点离开而得到更多的方块。 H能通过多种方法估算。我们这里用到的方法叫做Manhattan方法，计算从当前方块经过水平/垂直移动而到达目标方块的方块总数。然后将总数乘以10。这种方法之所以叫做Manhattan方法，因为它很像计算从一个地点到达另一个地点的城市街区数量计算，此时你不能斜向的穿越街区。重要的是，当计算H的时候，要忽略任何路径中的障碍。这是一个对剩余距离的估算值，而不是实际值，这就是试探法的称谓由来。 G和H相加就算出了H。第一步搜索的结果见下图的描述。F，G和H值都写入了每个方块。如开始方块相邻右边的方块，F显示在左上方，G显示在左下方，而H显示在右下方。 好，让我们来观察某些方块。在有字母的方块中，G=10。这是由于在水平方向上从开始点(到那里)只有一个方块的距离。开始点相邻上方、下方和左边的方块都具有同样的G值：10。斜角的方块G值为14。 H的计算通过估算Manhattan距离而得，即：水平/垂直移动，忽略途中的障碍，到达红色的目标方块的距离。用这种方法，开始点相邻右边的方块和红色方块相聚3个方块，那么H值就是30。其上的方块距离为4（记住，只能水平/垂直移动），H就是40。你也可以看看其它方块的H值是如何计算出的。 每个方块的F值，再说一下，不过就是G和H相加。 持续的搜索为了继续搜索，我们简单的选择开放列表里具有最小F值的方块，然后对选定的方块做如下操作： 将它从开放列表中选出，并加入封闭列表。 测试所有的相邻方块，忽略封闭列表内的和不可行走的（墙，水及其它非法地形）方块，如果方块不在开放列表中，则添加进去。将选定方块作为这些新加入方块的父亲。 如果一个相邻方块已经存在于开放列表，检查到达那个方块的路径是否更优。换句话说，检查经由当前方块到达那里是否具有更小的G值。如果没有，不做任何事。相反，如果新路径的G值更小，把这个相邻方块的父亲改为当前选定的方块。最后，重新计算那个方块的F和G值。 好了，让我们看看它是怎样工作的。在初始的9个方块中，当开始方块被纳入封闭列表中，我们的开放列表就只有8个方块了。在这些方块中，具有最小F值的是开始方块相邻右边的那个，其F值为40。所以我们选定这个块作为下一个方块。在随后的图示中，它以高亮的蓝色表示。 首先，我们把它从开放列表中取出，并加入到封闭列表（这就是它现在是高亮的蓝色的原因）。然后我们检查相邻的方块。然而，这个方块相邻的右边是代表墙的方块，所以忽略他们。其相邻的左边是开始方块。它处于封闭列表内，所以也忽略它。 其它四个已经在开放列表中了，所以我们需要检查经由当前方块到达他们是否是更优的路径，使用G值作为参考点。我们来看看这个选定方块上面右边的那个方块。它的当前G值是14.如果我们经由当前方块到达那里，G值将是20（10，到达当前方块的G值，再加上10垂直移动到它上面的方块）。20&gt;14，所以这不是一个好的路径。看看图解能够好的理解这些。从开始方块斜向移动到那个方块更直接，而不是水平移动一个方块，再垂直移动一个方块。 当我们队已经存在于开放列表中的4个相邻方块都重复这个过程。我们发现经由当前方块没有更佳的路径，所以什么也不用改变。现在看看所有的相邻方块，我们已经处理完毕，并准备移动到下一个方块。 现在，我们再遍历开放列表，它只有7个方块了，选择具有最小F值的那个。有趣的是，此时有两个方块都有值54。那么我们选择哪个？实际上这不算什么。为了速度的目的，选择你最后加入到开放列表的那个方块更快。当你接近目标的时候，当你更接近于目标的时候，它倾向于后发现的那个方块。但这真的没有什么关系。（不同的处理造成了两个版本的A*可能找到不同的等长路径） 我们选择下面的那个，位于开始方块的右边，如下图所示。 这一次，当检查相邻的方块时，我们相邻右边的是一个墙方块，所以忽略它。对那个方块上面的块同样忽略。我们也忽略墙下面的方块。为什么？因为你不把临近墙的角切开就无法直接到达那个方块。实际上你需要先向下走去，然后越过那个方块。在这个过程中都是围绕角在移动（说明：切开角的规则是可选的。它的使用依赖于你的节点如何设置） 这样就剩下5个方块了，当前方块下的两个方块不在开放列表中，所以，要添加他们，并把当前方块作为他们的父亲。在另外三个方块中，有两个已经在封闭列表中了（开始方块和当前方块上面的那个，他们都用高亮的蓝色在图中标出来了），所以忽略他们。最后一个方块，当前方块相邻左边的那个，检查经由当前方块到达那里是否得到更小的G值。没有。所以处理完毕，并准备检查开放列表的下一个方块。 我们重复这个过程，直到把目标点添加到开放列表，此时的情形如下图所示： 注意开始方向向下的第二个方块，在前面的描述中其父亲已经发生改变，开始它的G值为28，指向其右上角的方块。到现在它的值是20，指向其上方的方块。这是在搜索方法中某处发生的吗？在那里G值被检查，而且使用了新的路径后，它得到了更小的值。所以它的父亲切换了，G和F也重新计算。而这个改变在本例中不见得非常重要，在决定最佳路径的时候，持续的检查会产生各种差别。 那么我们怎样决定实际的路径呢？简单，从红色的目标方块开始，向后移动到它的父亲，跟从箭头的指示，最终你会回到开始方块，这既是路径！它如下图所示。从方块A移动到方块B就是从每一个方块（节点）的中心移动到路径上的下一个方块的中心的简单过程，直到到达目标！ A-star方法汇总好了，现在你已经读完了所有解释，让我们在这里一步一步的列出所有操作： 添加开始方块到开放列表。 重复下面的过程 查找开放列表中具有最下F值的方块。我们把它作为当前方块 把它放入封闭列表 对当前方块的8个相邻方块的每一个？ 如果它不可行走，或者存在于封闭列表中，忽略它。否则执行下面操作。 如果它不在开放列表中，将它添加进去，以当前方块作为其父亲，记录这个方块的F，G和H值 如果它已经在开放列表中了，检查到达那个方块的路径是否更优，以G值为测量值。更低的G值意味着更好的路径。如果找到，这个方块的父亲改为当前方块，并重新计算这个方块的G和F值。如果你保持开放列表按F值排序的话，可能需要重新排序来解决这个变化。 结束循环 当你 将目标方块加入到开放列表，此时路径已经找到，或者 没有找到目标方块，并且开放列表是空的。此时，没有路径。 保存路径，从目标方块往回走，从每个方块走到它的父亲方块，指导抵达开始方块，那就是路径。 当你在网上和分类论坛阅读很多讨论A-Star寻路的时候，你有时候会发现某些人所指的A代码实际上并不是真正的A算法。对于应用中的A算法，你需要包含上面讨论到的元素 –特别是开放列表和封闭列表，以及使用了F、G和H的路径排序。有很多其它的寻路算法，但是其它的方法并不是A 通常认为它是最好的方法。 关于实现的提示现在你已经理解了基本的方法，这里是当你需要些自己的程序时需要考虑的更多的东西。下面的某些材料引用了我用C++和Blitz Basic写的程序，但是这些要点对其它语言也是同样有效的。 维护开放列表：实际上这是A*寻路函数最好费时间的函数之一。每次访问开放列表时，你都需要找到具有最小F值的方块。有很多种方法可以做到这一点。你可以保存所需的路径项目，每次当你需要找到最小F值的方块时，简单的遍历整个列表。这很简单，不过路径长的时候非常慢。这个方法可以改进，通过维护一个排序的列表，每次需要最小F值的方块时，简单的抓出第一个项目就可以了，当我写自己的程序时，这是我用到的第一个方法。 其它单元：如果你碰巧的阅读我的范例代码，将会注意到它完全忽略了地图上的其它单元。我的寻路怪物实际上是穿越彼此而通过。依赖于游戏，这可能是正确的，或者是不正确的。如果你需要考虑地图上的其它单元，并让他们能围绕彼此移动，我建议你在寻路代码里忽略其它单元，而另外写一些代码来检测两个单元是否发生了碰撞。当碰撞发生时，你可以生成一个新的路径或者使用一些标准的移动规则，指导障碍不在路上，然后生成新路径。当计算初始路径时，为什么不包含其它单元？嗯，因为其它单元会动，他们可能不在自己的位置，当你到达那里的时候。这会造成一些怪异的结果，路径计算后，在某处单元突然转向避开一个不再停留在那里的单元，却撞上了另一个经过它路径的单元。 寻路代码中忽略其他的单元，然而，这意味着你要写单独的代码来处理碰撞。这是和游戏很相关的，所以我把决定权留给你。本文后面的参考资料一节里， Bryan Stout的文章值得一读，里面有一些可能的解决方案（如强力跟踪[robust tracing]，等等）。 关于速度的更多技巧 ：当你开发自己的A*程序，或者改编我所写的那个，最终你会发现寻路使用了大块的 CPU时间，特别是当你有大量的寻路怪物，运行在一个相当大的地图上的时候。如果你读网上的资料，你会发现甚至象星际争霸[Starcraft]或者帝国时代[Age of Empires]这样的专业游戏也会遇到这些问题。如果你发现由于寻路导致运行变慢，这里有一些可能提高速度的主意： 考虑小一些的地图或者少一些的怪物。 不要一次对太多的怪物做寻路。而是把他们放入队列，从而把他们分散到更多的游戏循环。如果你的游戏运行在，比如，40帧/秒，没有人会注意到。但是他们会注意到每一小段时间的游戏变慢，当大量的怪物都在同一时间寻路的时候。 考虑对地图使用大一些的方块。这样就减少了寻路要搜索的方块总数。如果你有雄心的话，可以设计两种或更多寻路系统，依赖于路径的长度而用于不同的场合。这就是专业人士的做法，对长路径使用大的区域，然后当接近目标时切换到使用小一些的方块/区域的精确搜索。如果你对这个概念有兴趣，参考我的文章Two-Tiered A* Pathfinding。 考虑对较长的路径应用路点系统，或者设计预计算[precalculated]的多个路径，它们对游戏是固定不变 [hardwired]的。 考虑预处理地图，计算出哪些区域是从其他区域不可到达的。我把这些区域叫做“岛屿”。实际上，他们也可以是岛屿或者其他围了墙而无法到达的区域。A*的缺点之一就是，如果你告诉它搜索到达这些区域的路径，它会搜索整个地图，仅当每一个开放列表和封闭列表中的可到达方块/节点都处理后，才会停止。那会浪费大量的CPU时间。这种现象是可以避免的，通过预先决定那些区域是无法到达的，用数组或者类似的数据结构记录这些信息，然后在开始路径搜索前检查它。在我的代码的Blitz版本中，我创建了一个地图预处理器[map pre-processor]来做这件事。它也预先检查寻路算法可以忽略的死点[dead-ends]，这样速度就提高了很多。 多样的地形代价： 在本教程以及我的附带程序里，地形只有两种情况：可行走和不可行走。如果你有可以行走但移动代价更高的地形怎么办？沼泽，山坡，地下城的楼梯，等等？这些都是可行走而移动代价高于平坦地面的地形实例。同样的，道路可能具有比它周围地形小一些的移动代价。 这个问题很容易解决，当计算任意给定的方块的G值时，加上地形的代价。简单的加上一个奖励代价给这些方块。A寻路算法已经写成查找最小代价的路径，应该容易处理它。在我描述得简单示例中，当地形只有可行走和不可行走时，A能找到最短，最直接得路径。但是在多代价[variable-cost]地形环境中，最小代的得路径可能行走了较长的距离。如同选择围绕沼泽的道路，而不是直接穿越沼泽。 还有一个有趣的附加考虑是被专业人士称作“影响映射[influence mapping]”的东西。如同上面描述的多代价地形一样，你可以创建一个附加的点系统，并引用到AI的路径中。想象你有一个地图，有大量的怪物守护着穿越山区的通道。每次当电脑送某人到经过这个通道的路径时，都会被困住。如果你愿意，你可以创建一个影响地图，处罚发生大量流血残杀处的那些方块。这会教电脑偏好安全的路径，并帮助它避免不利的位置：仅仅由于路径更短（但更危险），而不停的输送部队和怪物通过这个路径。 处理未探索区域： 你是否玩过一款PC游戏，在那里电脑总是准确的知道路该如何走，即使地图没有探索？依赖与游戏，那样的寻路太好了反而不够真实。幸运的是，这个问题很容易解决。 答案就是创建一个独立的“发现可行走[knowWalkability]”数组用于每一个玩家以及电脑对手（每一个玩家，不是每一个单元 – 那将需要更多的计算机内存）。每个数组包含了玩家已探索区域的信息，另一方面，地图上其它区域直到被证实后才被假设是可行走的。使用这个方法，单元会漫步于死点位置，重复做相同的错误选择，直到他们发现周围的路。一旦地图都探索了，寻路就正常工作。 更平滑的路径： 虽然A*会自动给出最短的，最低代价的路径，它不会自动给出看起来最平滑的路径。看一看本例最后计算出来的路径（图 7）。那条路径的第一步位于开始方块的右下方。如果第一步的方块就是开始方块相邻下方的方块，路径会不会更平滑些？ 有很多方法可以解决这个问题。当你计算路径的时候，要处罚那些改变方向的方块，给它们一个附加的G值扣分。这样计算后，你可以走一遍那条路径，看一看那些选择了邻近方块而让路径看起来更好的地方。关于这个问题的完整信息，参考Gamasutra.com上Macro Pinter的文章 Toward More Realistic Pathfinding，它是免费的，但需要注册。 非方块搜索区域： 在我们的示例中，我们使用了一个简单的2D方块布局。你不必使用这个方法。你可以使用不规则的形状区域。考虑一下棋盘游戏Risk，和游戏中的国家。你可以设计一个象那样的寻路关卡。为此，你将需要创建一个表来存储哪些国家和哪些国家相邻，以及相关的从一个国家移动到另一个国家的G值。你也需要选择一种估算H值的方法。其它的处理就和上面示例一样。当添加新项目到开放列表中时，你将简单的查找表中的国家，而不是邻近的方块。 同样的，你可以创建一个路点系统，对于固定地形场景中的路径。路点通常是一条路径上往来移动的点，这路径可能是一条道路，也可能是一个地下城的关键通道。作为游戏设计者，你能预先指定这些路点。如果没有障碍存在于两个路点间的直线路径上，就可以认为它们是“相邻”的，如同在Risk中那样，你应该保存这些邻接信息到一个某种类型的查找表中，当生成新的开放列表项目的时候使用它。然后记录相关的G值（可能是节点间的直线距离）和H值（可能是节点到目标的直线距离）。其他的和往常一样处理。]]></content>
      <tags>
        <tag>A-star</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github中ssh密钥的生成]]></title>
    <url>%2F2017%2F06%2F02%2Fgithub%E4%B8%ADssh%E5%AF%86%E9%92%A5%2F</url>
    <content type="text"><![CDATA[github中ssh密钥的生成（如何不用输密码同github交互）使用git Bash by winter on 2017/5/21 1. 查看SSH keys是否存在打开git Brash界面–》输入 ssh 如果出现如下界面，代表SSH keys存在 2. 生成新的ssh key在命令行中输入ssh-keygen -t rsa -C &quot;3396543978@qq.com&quot; 输入passphrase（本步骤可以跳过）不输入则表示没有密码 将新生成的key添加到ssh-agent中: 如果出现如下界面，则创建成功 3. 将ssh key添加到Github中用自己喜欢的文本编辑器打开id_rsa.pub文件，里面的信息即为SSH key，将这些信息复制到GitHub的Add SSH key页面即可 4. 设置 username 和 email，添加远程地址 remote: Permission to Gwemz/git.git denied to winterGuo.fatal: unable to access ‘https://github.com/Gwemz/git.git/‘: The requested URL returned error: 403 参考文章： Git 最著名报错 “ERROR: Permission to XXX.git denied to user”终极解决方案 多个GITHUB帐号的SSH KEY切换参考文章 winter@DESKTOP-43SLAF5 MINGW64 ~/Desktop$ ssh-add ~/.ssh/id_rsaIdentity added: /c/Users/winter/.ssh/id_rsa (/c/Users/winter/.ssh/id_rsa) How to 切换不同的github账户？ 相关参考文献 文章一 文章二 文章三 文章四 文章五 修改仓库.git目录下config中的配置文件]]></content>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo你的博客]]></title>
    <url>%2F2017%2F06%2F02%2Fhexo%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[如何利用Hexo搭建个人博客？ hexo简介hexo出自台湾大学生tommy351之手，是一个基于Node.js的静态博客程序，其编译上百篇文字只需要几秒。hexo生成的静态网页可以直接放到GitHub Pages，BAE，SAE等平台上. 1231. 如果你对默认配置满意，只需几个命令便可秒搭一个hexo。2. 如果你跟我一样喜欢折腾下，30分钟也足够个性化。3. 如果你过于喜欢折腾，可以折腾个把星期，尽情的玩。 搭建过程你或许觉得有那么点小繁琐，但一旦搭建完成，写文章是极简单，极舒服的。 只需要几个简单命令，你就可以完成一切。 123hexo n #写文章hexo g #生成hexo d #部署 # 可与hexo g合并为 hexo d -g 环境准备安装node到Node.js官网下载相应平台的最新版本，一路安装即可。 安装gitHexo之next主题设置首页不显示全文(只显示预览) 写文章执行new命令，生成指定名称的文章至hexo\source_posts\postName.md。 1hexo new [layout] &quot;postName&quot; #新建文章 其中layout是可选参数，默认值为post。有哪些layout呢，请到scaffolds目录下查看，这些文件名称就是layout名称。当然你可以添加自己的layout，方法就是添加一个文件即可，同时你也可以编辑现有的layout，比如post的layout默认是hexo\scaffolds\post.md 1234title: &#123; &#123; title &#125; &#125;date: &#123; &#123; date &#125; &#125;tags:---]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决WampServer 80端口号被占用的问题]]></title>
    <url>%2F2017%2F04%2F24%2Fwampserver%E7%AB%AF%E5%8F%A3%E5%8F%B7%E8%A2%AB%E5%8D%A0%E7%94%A8%2F</url>
    <content type="text"><![CDATA[沿着C:\wamp\bin\apache\apache2.4.9\conf目录，找到文件httpd.conf文件将80端口号改为任意值，诸如8080端口： 改完之后重启WampServer就会发现软件图标变为了绿色 但是“Localhost”、“phpMyAdmin”、“SQLiteManager”，你可以点击打开看到依旧是默认的80端口。 找到wamp安装目录下的wampmanager.tpl文件，记事本打开： 找到wamp安装目录下的wampmanager.ini文件 将本文件中的http://localhost 替换为 http://localhost:8080]]></content>
      <tags>
        <tag>wampserver</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何脱颖而出]]></title>
    <url>%2F2017%2F04%2F24%2F%E5%A6%82%E4%BD%95%E8%84%B1%E9%A2%96%E8%80%8C%E5%87%BA%2F</url>
    <content type="text"><![CDATA[如何脱颖而出 版权声明：本文为 winter文章，可以随意转载，但必须在明确位置注明出处！！！ 前两天有一位同学在小密圈里问我一个问题，说自己高中学历，想要学习编程，不知道可行么？ 我给他的回答是：很难，非常难，比你想象的还要难，但是难不代表不可行。 有别的热心的同学评论说，没什么不行的，只要比别人更努力就行，你看张哥，当初不也是非科班，学渣出身么，一步步靠自己努力走到现在。 是啊，很多读者喜欢拿我的经历来激励自己，我毕业转行做开发的时候，已经比同龄人落后太多太多，中间有过不少波折，但是走上正轨，确定方向之后，很快 2、3 年的时间就取得飞快进步，并且在业内也积累了一点名气，之后又从技术到产品、管理，业余时间从写博客，再到公众号，都取得了点小成就，大家都知道我很努力，甚至到拼命的地步，所以，很多人把我取得的成就全部归功于我的努力，其实，今天，我要说，这是一个假象！ 不可否认，努力固然重要，但是如果只是单纯努力的话，我相信这世界上努力的人随处可见，这世界从来不缺努力的人，但是，如何能在这一群努力的人中间，脱颖而出，这才是一个关键点，今天，我就在这里分享下我私人总结的一点经验。 1. 提高自己的起点 不管你是高中学历也好，还是跟我一样非科班的学渣也好，其实本质上我们的先天条件比别人差，时间周期也比别人晚，我们要想赶上那些先天条件比我们好的同学，比他们更努力，虽然可以赶上一部分人，但是很多条件好，同样很努力的人比比皆是，这个时候，就需要寻找点方法了，我总结的第一个方法就是–提高自己的起点。 举个例子，我们大部分人学习编程的时候，大都是看视频、百度、CSDN 博客、一些国内论坛等，可以这么说，即使是现在，这仍然是大部分人学习的主要方式。但是我当时就不这么想，大家都这么学习，我如何才能效率更高呢？ 所以，我当时的做法，当别人都在看视频的时候，我坚持看博客、文档学习，因为看视频很没效率，看博客除了节省我的学习时间之外，还提高了我的阅读能力。当别人在用百度，查看国内各种二手资料的时候，我坚持使用 Google，查看国外大牛博客，我英语很差，这对我来说很难，但是我硬逼着自己，坚持下去，当别人混国内小白论坛的时候，我就开始混 GitHub 开源社区，学习国外大牛的开源项目，当别人在看国内翻译的资料的时候，我却逼着自己去官方看英文文档。 这一切的一切，本质上都是为了提高自己的起点，虽然我起步晚，但是我起点高，慢慢的就会缩小差距，时间长了，甚至后来居上。 当然，前提是自己得衡量自己的能力，就好比，你才刚学会写一个 Hello World ，你说你要去看 Android 源码，这不现实。所以，我在最初入门的时候也经历过看视频，百度的阶段，但是一旦自己上手之后，我坚定的逼着自己让自己的起点更高。 2. 保持专注 很多人其实论努力程度不输任何人，但是总感觉自己进步非常慢，那么原因很可能是你不够专注。我看到这么一个现象，IT 界技术日新月异，动不动就会出来一门新语言，新框架，尤其前端界更是，很多人就看到有一个看似很火的东西出来了，然后去学习，另一个东西出来了，又忙不迭的去学习，生怕错过了时间窗口就错过了巨大的机会。 然而殊不知，万变不离其宗，你连手上的事都没做好呢，就想着可能会错失巨大的机会，在编程界，其实各个语言都是通的，把一门领域学好学精，后面再涉及其他领域也是很快速的。 有人可能会问，不紧跟时代潮流，错过了机会怎么办？ 潮流固然要关注，但是我敢这么说，你连手上的事都还没做好呢，即使机会来了，一样不属于你。我们总是夸大了时间窗口的作用，以为错过了互联网、错过了移动互联网，决不能错过下一个风口浪尖了，这真的是一个误区，看似每一个风口来了，抓住机会的都是第一时间进入的，殊不知，第一时间死掉的比存活下来的不知道要多出多少，能存活下来的，只是被人忽略了自身的实力而已，而且很多后来居上的例子数不胜数。 所以，你不妨专注在一件事上，专注手上正在做的事，就如我博客所说：做好现在的事！ 3. 把事情做到极致 这世界上很多人都很专注，甚至有几十年如一日在自己的工作岗位上兢兢业业，但是专注在一件事上还不够，你要把事情做到极致才行。 这个特质对很多职场中的同学非常有用，很多刚入职场的同学总是感觉自己做的工作没什么用，就是打杂的，抱怨自己被大材小用了，然而，就是这么简单的工作，你能把它做好，做到极致，一样很有价值，你也才能因此得到更多的机会。 我刚加入公司的时候，甚至做过一段时间的「电话管理员与网管」，公司每每调换座位的时候，我从来都是利用下班时间帮大家调换电话线，我每次都会亲自验证，要知道很多电话不在同一楼层，这非常麻烦，但是从来没出过错，人事都觉得不可思议，因为之前的人负责的偶尔调错很正常。除此之外，我觉得机房里那些电话线非常混乱，杂乱无章，专门重新做了整理，这些工作，在之前，没人愿意去做。 我在给别人重装系统的时候，每次都会把驱动、常用办公软件一并给装好，之前，也从来没人想过这事。 正因为我把在公司的每件事都做到极致，我才能因此得到更多的信任与机会。 现在我在公众号写作，除了内容之外，我会力求把所有细节都做好，字体大小、标点、间距排版等等，我都会很在意，直到现在也一直在改进。 很多人总觉得自己工作做的还不错，分配的任务做完了，总觉得没事做，然而问问你自己，是否还可以做的更好？ 这个功能是不是还有更好的实现方式？代码是不是还可以更简练些？这个动画是不是还可以更流畅些？是不是有些历史遗留问题可以解决的？有些更好的框架是不是可以考虑学习应用在项目中？性能是不是还可以更好些？ 任何一件小事，做到极致，都是一项了不起的能力！ 4. 不要给自己设限 之前有人问我这么一个问题，说之前一直做技术 Leader 的角色，公司觉得他做的还不错，想让他做项目管理，他很纠结，担心自己做不好，而且还影响了技术上的进步。 如果是我，我会毫不犹豫的尝试。 很多人知道我，我自己是从一位不起眼的程序员，一步步走到公司管理层的，我现在参与公司的重大决策，现在除了技术之外，我涉及到的领域非常多，有产品、运营、商业、管理、投资等。 我当初一样面临过这种选择，一样犹豫过，一样有各种担心，但是当我走过来，我才明白我自己的职业选择都是来自于我的一个特质：我从来不给自己设限。 我自己的性格比较开放，喜欢折腾，喜欢接触不同的领域，有很多奇特的想法，比如我认为现在国家规定一个人只能同时在一家公司上班不科学，我认为未来是一个多元化人才的时代，一个人如果只要有能力，在一家公司写代码的同时，为什么不能同时在另一家公司做销售呢？只不过时代还不认可我这么前卫的想法。 但是，只要有机会，我都会接触不同的领域，我不会优先考虑我做不到，我只会先考虑，如果我做到了，会不会对自己的能力有很大帮助。 所以，当我有一个工程师转到管理岗位的机会时，我尝试了，毕竟，万一尝试之后，不适合自己，或者自己做不到，又能如何呢？大不了再做回老本行好了。幸运的是，我成功了，而且一直做到公司管理层。 除此之外，我还经常跟公司产品经理一起讨论产品，有很多不错的需求甚至都是我来提出的。由于我自己在公众号的运营经验，我有机会还教下我们的媒体运营同事，如何排版，如何更好的运营用户等。 我说我在商业、投资领域也有涉及，很多人可能觉得我又扯淡了，这些都是我在老板身边学到的，老板是投资出身，在这方面很厉害，毕竟呆的时间久了，自己总会有所感染，而且在去年还跟着老板一起在上海投资了一家吐司店，一年多的时间，估值翻了将近十倍，当然，由于自己第一次投资，还没什么经验，投资额度较小。 这个世界从来都是有得必有失，我做了管理之后，在 Android 技术领域上花费的时间很少了，也不用自己写代码了，但是我在其他领域的能力收获非常大，我也一直在向我口中所说的多元化人才努力。 有人可能会有疑问了，不给自己设限不跟上面说到的专注矛盾么？ 当然不矛盾，不给自己设限的前提一定是自己具备了至少一项不错的能力，而且即使你再怎么专注，也没法一天 24 小时都在做一件事，即使你很专注，你也会有看电视、娱乐的时间。 所以，专注的做好手上的事固然很重要，但是不要闷头工作，也偶尔抬头看下外面的天空，拓宽下自己的视野，在有其他领域机会的时候，不妨勇敢的去尝试下。 5. 执行力 我们都知道努力很重要，但是很少有人能做到。 比如，即使我一而再再而三的号召大家，要写博客，学写作，又有几个人做到了呢？你知道，每天只需要学习 2 小时，一年之后，你的能力就有很大提高，又有几个人能做到？ 所以，大部分人的执行力很差，可能你一时做到了，也没法坚持下去，而把自己的执行力持续下去恰恰是最关键的一环，也就是所谓的：「道理我都懂，可是我做不到」。 这个话题很长，后面我会抽时间单独写篇文章，以自己的亲身经历总结了一点方法，教教大家如何才能改变这一现状，提高你的执行力，让你的努力更容易坚持下去。 以上，就是我所总结的，如何让你脱颖而出的一些技巧，希望对部分同学有所思考与帮助！ PS：可能有些人，看了以上我的总结，会觉得，这些东西我都知道，但是，真的是这样么？我敢说，在你没看这篇文章之前，你丝毫没有意识到自己比别人差在哪里，你只是看了之后，恍然大悟罢了。 还有些人，可能会觉得是鸡汤，某种意义上来说，确实是鸡汤，但是却都是自己真实经历的经验总结，有时候，鸡汤可能比所谓的干货更有用，很多道理其实大家都懂，我们做出改变缺乏的只是一个推动力。]]></content>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java环境配置eclipse的安装]]></title>
    <url>%2F2017%2F04%2F24%2Fjava%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AEeclipse%E7%9A%84%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[- java基础语法教程教程链接 - JDK环境配置 配置教程 - eclipse for JavaEE的安装 安装教程 - eclipse教程 教程链接 - 使用Tomcat搭建本地服务器 使用链接 - Java与MySQL连接 连接教程 - SQL Sever环境配置（安装SQL Sever数据库）- 解决命令提示符输入命令无反应的情况： 解决方法 - win10打开管理员命令提示符： windows+X——》命令提示符（管理员） - 解决win10无法更新组件的问题：(下载.NET Framework 3.5安装错误：) 解决方式一 解决方式二]]></content>
      <tags>
        <tag>java</tag>
        <tag>eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHPCMS的安装流程]]></title>
    <url>%2F2017%2F04%2F24%2Fphpcms%E7%9A%84%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[1234561. 本地服务器www目录下新建文件phpcms2. 在网站www.phpcms.cn下载安装包。有GBK 和 UTF8两个版本，推荐使用UTF8版本。下载文件解压，删除readme文件夹，将install_package文件夹下的文件拷贝到www目录下的phpcms文件夹内3. 访问localhost/phpcms/install/install.php按照指导进行安装 不懂本教程，没关系，查看 详细教程 注：后台管理系统中的设置可修改默认站点域名 三个重要的地址12345localhost/phpcms/admin.php(后台管理系统 账号：phpcms 密码：phpcms)localhost/phpcms/index.php(前台首页文件)localhost/phpcms/myadmin(数据库) 两个重要的目录1231. www/phpcms/phpcms/tmplates/default/content/2. www/phpcms/statics/ -css/ -images/ -js/]]></content>
      <tags>
        <tag>phpcms</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端框架MVC、MVVM、MVP介绍]]></title>
    <url>%2F2017%2F04%2F24%2FMVC%E4%BB%A5%E5%8F%8AMVVM%20MVP%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[1. MVCModel-View-Controller(模型-视图-控制器)是最常见的软件架构之一，业界有着广泛应用。 视图（View）：用户界面 控制器（Controller）：业务逻辑 模型（Model）：数据保存 各部分之间的通信如下： View传送指令到Controller Controller完成业务之后要求Model改变状态 Model将新的数据发送到View，用户得到反馈 接受用户指令时，MVC的两种方式：（互动模式） 另一种是直接通过Controller接受指令 2. MVPMVP模式将Controller改名为Presenter，同时改变了通信方向 各部分之间的通信，都是双向的 View与Model不发生联系，都是通过Presenter传递 View非常薄，不部署任何业务逻辑，称为“被动视图”（Passive View）,即没有任何主动性，而Presenter非常厚，所有逻辑都部署在那里 3. MVVMMVVM模式将Presenter改名为ViewModel，基本上与MVP模式完全一致 唯一的区别是，它采用双向数据绑定（data-binding）:View的变动自动反映在ViewModel，反之亦然。Angular和Ember都采用这种模式]]></content>
      <tags>
        <tag>java</tag>
        <tag>eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ionic安装和项目的创建]]></title>
    <url>%2F2017%2F04%2F24%2Fionic%E5%AE%89%E8%A3%85%E5%92%8C%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%88%9B%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[说来惭愧，都说隔行如隔山，没想到自己对同行的了解都微乎其微，还成天称是程序猿，直到前几天自己才听到Ionic,上度娘一问，瞬间就泪崩了，竟然在我身边有PhoneGap、cordova、AngularJS、nodejs、npm等等这么多“赫赫有名”的专有名词我以前竟然听都没听到过，可想自己是有多无知，以下是我这几天科普来的，错误之处还望指出，谢谢！ What is the Ionic？Ionic 是一个强大的 HTML5 应用程序开发框架，号称Advanced Html5 Hybrid Mobile AppFramework 是 AngularJS 移动端解决方案 可以帮助您使用 Web 技术，比如 HTML、 CSS 和JavaScript 构建接近原生体验的移动应用程序。 Ionic 主要关注外观和体验，以及和你的应用程序的 UI 交互，特别适合用于基于 Hybird 模式的 HTML5 移动应用程序开发..…. What is the PhoneGap ?PhoneGap是一个用基于HTML，CSS和JavaScript的，创建移动跨平台移动应用程序的快速开发平台。PhoneGap是一个跨平台的移动app开发框架，可以把html css js写的页面打包成跨平台的可以安装的移动app，并且可以调用原生的几乎所有的功能，比如摄像头，联系人，加速度等。 What is the Cordova ?Cordova提供了一组设备相关的API，通过这组API，移动应用能够以JavaScript访问原生的设备功能，如摄像头、麦克风等。 Cordova是PhoneGap贡献给Apache后的开源项目，是从PhoneGap中抽离出的核心代码，是驱动PhoneGap的核心引擎。有点类似Webkit和Google Chrome的关系。渊源就是：早在2011年10月，Adobe收购了Nitobi Software和它的PhoneGap产品，然后宣布这个移动Web开发框架将会继续开源，并把它提交到Apache Incubator，以便完全接受ASF的管治。当然，由于Adobe拥有了PhoneGap商标，所以开源组织的这个PhoneGap v2.0版产品就更名为Apache Cordova。 What is the AngularJS ?AngularJS 是一个JavaScript 框架。它是一个以JavaScript 编写的库。AngularJS 使得开发现代的单一页面应用程序（SPAs：Single Page Applications）变得更加容易。 AngularJS 把应用程序数据绑定到 HTML 元素。 AngularJS 可以克隆和重复 HTML 元素。 AngularJS 可以隐藏和显示 HTML 元素。 AngularJS 可以在 HTML 元素”背后”添加代码。AngularJS 支持输入验证。 What is the NodeJs?Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。 Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。 其实吧，可以认为 Node.js 就是运行在服务端的 JavaScript。 What is the NPM ?NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种： 允许用户从NPM服务器下载别人编写的第三方包到本地使用。 允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。 允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。 新版的nodejs已经集成了npm，所以装了nodejs的话npm也一并安装好了。可以通过输入”npm -v”来测试是否成功安装。 How to make 移动应用(App)有三种方式可以为手机制作移动应用： 原生应用（Native app） 手机网站（Mobile website） 混合应用（Hybrid app） 原生应用（Native app）如上述，你可以根据不同系统平台指定SDK制作对应系统平台下的移动应用，如果你想要为iOS系统创建一款应用，你需要： 拥有一台苹果Mac电脑，当然其他方法也可以，但是我不推荐。作为初学者，一台廉价的Mac Mimi就可以了。 从App store下载Xcode 购买苹果开发者许可证（Apple Developer license）99刀￥一年（如果你想要在App store上发布应用） 你可以利用Swift语言或者它的前辈ObjectiveC语言创建App，Swift 语言在沉重的ObjectiveC语言上做出了巨大改进，如果你决定开发原生app，相比利用ObjectiveC开发原生app，Swift更容易上手，特别是当你有Web开发的背景时。 如果你想要为Android系统创建一款原生应用，你需要： 拥有一台电脑 下载合适的SDKs（后面将会讲到） 购买谷歌开发者许可证（Google Developer license）25刀￥（如果你想要在Google Play Store上发布应用） 利用原生开发技术开发的应用具有速度快和直接利用原生API的优势（你不需要像开发混合应用一样【Hybrid App】作任何中间封装），缺点是，你需要为不同手机系统平台开发不同版本的移动应用。（撰写多套代码） 手机网站（Mobile website）通过手机浏览器可以访问手机网站，手机网站可以根据手机屏幕大小自适应。由于手机网站比较难以维护，一种叫做响应式网站设计（responsive website design）的方法被使用，通过这种方法你拥有一套HTML代码库，你可以通过使用媒体查询（Media queries）根据不同设备不同分辨率（resolutions）改变他们的网站外观。jQuery mobile 是一种出色的移动框架。使用它你可以制作一款移动版本的Web应用程序。移动网站一个显著的优势就是你可以根据需要实时更新他们的内容，而不用去等待苹果Apple或者谷歌Google的审核，劣势则包括低耦合，更少的特征。 混合app（Hybrid app）混合应用基本上是一款手机应用，它和撰写网站的程序语言基本相同，唯一不同的就是他们包含在一个孤立的浏览器中（WebView）， 原生应用通过WebView运行Web应用，混合应用可以调用手机摄像头、GPS等，通过利用插件，混合应用可以调用手机其它的硬件功能，你可以利用开发Web应用的技术开发混合应用。然而，WebView有速度的限制， 制作成熟的3D图像游戏可能不是最好的选择。 安装Ionic1. 需要有JDK和SDK环境，这是Android开发必有的平台（JDK在技术文章003中已经详细阐述了）安卓SDK下载以及环境的配置： 下载地址：（可以使用包含的 sdkmanager 下载其他 SDK 软件包 需要翻墙）立即下载 安卓开发相关资源链接 包含Android Studio 下载后双击安装，指定Android SDK的安装目录，为了方便使用Android SDK包含的开发工具，我们在系统环境变量中的Path设置Android SDK的安装目录下的tools目录。 在Android SDK的安装目录下，双击“SDK Manager.exe”，打开Android SDK Manager，Android SDK Manage负责下载或更新不同版本的SDK包，我们看到默认安装的Android SDK Manager只安装了一个版本的sdk tools。 打开Android SDK Manager，(tools目录下的android.bat)它会获取可安装的sdk版本，但是国内有墙，有时候会出现获取失败的情况。 12345678910111213**配置Android环境变量**- 默认路径安装后，安装完成，开始配置环境变量。- 打开计算机属性——高级系统设置——环境变量- 新建一个环境变量，变量名：ANDROID_HOME，变量值：E:\android_sdk\tools_r25.2.3-windows（以你安装目录为准,确认里面有tools和add-ons等多个文件夹），点击确认。- 在用户变量PATH后面加上变量值%ANDROID_HOME%\platform-tools;点击确认即可。 在系统变量path中添加;E:\android_sdk\tools_r25.2.3-windows\toolsAndroid SDK配置完成，接下来验证配置是否成功。点击运行——输入cmd——回车——输入adb——回车，如果出现一堆英文，即表示配置成功，在输入Android，启动Android SDK Manager。 2. 下载Node.js，安装Node.js下载地址： https://nodejs.org/ 安装都选默认的就行 装好之后，nodejs会默认配好环境变量，你可以去path路径查看 Node Pakcege Manager（NPM）会在安装Node.js时同时安装其它的包，为了检验Node.js是否在Windows上安装成功，在终端上运行下面的命令： node -v 你会获得类似下面的版本信息： v0.12.7 3.安装Git你仅仅需要下载和运行它，根据相应的指引安装即可。为了验证你是否在Windows/Mac上安装Git成功，在终端运行下面的命令行： Git 你会获得如下输出： 4.安装ionic和cordova 打开node.js command prompt使用npm install –g cordova ionic进行安装cordova和ionic（可以分开安装，npm install –g cordova 和 npm install –g -ionic）,很明显，在天朝使用这种方法安装有点行不通。 不用急，咱天朝子民有天朝子民的方法，使用淘宝镜像是网上很多人用的方式输入npm install –g cnpm –registry=https//registry.npm.taobao.org,安装完成之后，以后的插件都可以使用cnpm来替代npm来安装cnpm install –g ionic cordova 如果上面方法还不行，就看这里吧1.npm config –globalset registryhttp://registry.cnpmjs.org 2.npm install –g cordova ionic 查看ionic和cordova是否安装 ionic ionic –v cordova –v 5. 创建项目如果你仅仅只运行ionic start appname 命令，Ionic CLI将会构建一个bootstrap应用（所有需要的构建都会在appname文件夹里面），伴随着空的模板，这儿有其他三个模板包括blank（空模板），sidemenu（侧边栏）和tabs（底部导航栏），除此之外，你可以使用Github repo starters和Codepen URL starters等模块，为了获得更多的starter apps模块，你可以访问 这篇文章 ，在我们的例子中，我们将会使用sidemenu（侧板栏）模板，在终端运行下面的命令： ionic start g_app1 sidemenu 通过cd命令进入你的项目:$ cd g_app1 设置项目使用Sass:ionic setup sass 在本地浏览器中实时开发:ionic serve 添加一个系统平台 (ios or Android):ionic platform add iOS [Android] 注意: iOS 开发需要OS X系统 注意2：在ionic build的时候需要使用VPN 否则它的包下载的非常慢！！！ 详细见Android平台开发指南 编译你的app:ionic build 在模拟器上运行你的app:ionic emulate 在真机上运行你的apps（安装应用到插入电脑的Android手机上）:ionic run 使用ionic打包服务打包一个app:ionic package 12345注意：npm install -g ionic cordova （此处安装很费劲，，，，如果安装不上，请直接使用国内镜像），也可以安装cnpm，这样就容易装cordova和ionicnpm install -g cordova --registry https://registry.npm.taobao.orgnpm install -g ionic --registry https://registry.npm.taobao.org]]></content>
      <tags>
        <tag>ionic</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[到底是我们改变了世界，还是世界改变了我们]]></title>
    <url>%2F2017%2F04%2F24%2F%E5%88%B0%E5%BA%95%E6%98%AF%E6%88%91%E4%BB%AC%E6%94%B9%E5%8F%98%E4%BA%86%E4%B8%96%E7%95%8C%EF%BC%8C%E8%BF%98%E6%98%AF%E4%B8%96%E7%95%8C%E6%94%B9%E5%8F%98%E4%BA%86%E6%88%91%E4%BB%AC%2F</url>
    <content type="text"><![CDATA[图片来自网络 曾梦想仗剑走天涯，无奈梦终究是梦，现实还是太骨感， 走出校门，好多事你都需要考虑，毕竟是一个成年人，有着健全的身体，在学校心里边想着：丫掌握这么多技术，出去随便干什么都可以养活的了自己，更别说身上还扛着这么大的一把剑 但是在每天投着上百份的简历，结果约到的面试还是聊聊无几之后，心里就不由为自己打上了一个大大的疑问号？别人干起来那么轻松的事，丫为什么到你身上这么难，每走一步都是一个坑 久不联系的同学，找到你就给你塞一个高难度任务，在你自己的任务都还没完成的情况下，耗费整天的时间帮他解决问题，解决不好总觉的成了千古罪人 感觉待在哪儿都那么不自在，总觉的自己怎么那么多余，一无是处，浪费资源 但是第二天醒来，该干嘛还是得干嘛，因为毕竟的活着，不为别人，只为能靠自己的力量活着 如果哪一日要是有所小成，我想说绝不是因为别人，而是这个社会把你变的这般厚颜无耻。。。。。。 到底是我们改变了世界，还是世界改变了我们？]]></content>
      <tags>
        <tag>杂文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端开发面试题一]]></title>
    <url>%2F2017%2F04%2F24%2F%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%80%2F</url>
    <content type="text"><![CDATA[1. WEB标准以及W3C标准是什么？标签闭合、标签小写、不乱嵌套、使用外链的css和js、结构行为表现的分离 2. xhtml和html有什么区别？XHTML元素必须被正确的嵌套，闭合，区分大小写，文档必须拥有根元素 3. 行内元素有哪些？块级元素有哪些？行内元素 a b img em i span input select 块级元素 div p h1-h6 form ul dl ol table 4. 行内元素和块级元素有什么区别？行内元素不可以设宽高，不独占一行 块级元素可以设置宽高，独占一行 5. 我想让行内元素跟上面的元素距离10px，加margin-top，padding-top可以吗？margin-top和padding-top无效 6. CSS的盒模型由什么组成？内容、padding、border、margin 7. 说说display属性有哪些？可以做什么？display:block 行内元素转换为块元素 display:inline 块级元素转换为行元素 display:inline-block 转换为内联元素 8. CSS的选择符有哪些？ id选择器(#myid) 类选择器(.myclassname) 标签选择器(div,h1,p) 相邻选择器(h1+p) 子选择器(ul&gt;li) 后代选择器(li a) 通配符选择器 属性选择器(a[rel=”exrernal”]) 伪类选择器(a:hover;li:nth-child) 9. 哪些CSS属性可以继承？ 可继承性：font-size font-family color 不可继承性：border padding margin width height 10. CSS优先级算法如何计算？ !important&gt;id&gt;class&gt;标签 11. text-align:center 和 line-height有什么区别？ text-align是水平对齐 line-height是行间 12. 前端页面由哪三层构成，分别是什么？作用是什么？ 结构层（html）、表示层（css）、行为层（js） 13. 标签上的title和alt属性的区别是什么？ alt是图片属性，让搜索引擎认识你的图片，当图片不显示的时候显示 title是网站的标题，是SEO中最重要的属性 14. 使用css图片精灵有什么好处？ CSS图片精灵将一张张小的图片整合到一张大的图片上，减轻HTTP的请求数量。 15. 什么是语义化的HTML？ 标签使用的合理性，对于搜索引擎的抓取有好处 16. b标签和strong标签，i标签和em标签的区别？ 后者有语义 前者则无 17. title与h1的区别？ title侧重网站的信息标题 h1侧重于文章主题 站在SEO的角度来看，好网站少不了title，好文章少不了h1标题，title权重高于h1 18. 清楚浮动的几种方式，各自的优缺点？ 1.使用空标签清楚浮动clear:both(缺点：增加无意义的标签) 2.使用overflow:hidden;(使用ZOOM等于1 用于兼容IE) 3.使用after伪元素清楚浮动（适用与非IE浏览器） 19. display:none 和 visibility:hidden的去别是什么？ visibility:hidden;将元素隐藏，但还是占着位置 display:none; 将元素的显示设为无，不占任何位置 20. 说出几种IE6 BUG的解决方法？21. 域名和服务器的相关知识？ 域名：www.baidu.com 服务器：后台处理程序以及数据库（对客户端的请求进行相应的响应） IP地址指向域名 192.168.1.1——》www.baidu.com 22. HTTP状态码都有哪些？ 200OK 客户端请求成功 400Bad Request 客户端请求有语法错误，不能被服务器所理解 403Forbidden 服务器收到请求 但是拒绝提供服务 404Not Found 请求资源不存在 输入了错误的URL 500 Internet Server Error 服务器发生不可预期的错误 503 Server Unavailable 服务器当前不能处理客户端的请求，一段时间后可能回复正常 23. 如何优化网页加载速度？ 1.减少css、js的文件数量和大小（减少重复性代码，代码重复性利用），压缩CSS和JS代码 2.图片的大小 3.把CSS样式表放置于顶部，把JS放置于页面底部 4.减少http的请求数 5.使用外部的js和css 24. position属性absolute和relative的区别？ absolute绝对定位 相对于浏览器定位 relative相对定位 相对于前面的容器进行定位 25. HTML5有哪些新标签？26. CSS新增伪类有哪些？ p:first-of-type p:last-of-type p:only-of-type p:only-child p:nth-child(2) :enabled、:disabled 控制表单控件的禁用状态 :checked 单选框和复选框被选中 27. 全局变量和局部变量有什么区别？28. 谈谈 this对象的理解 this是js的一个关键字，随着函数的使用场合不同，this 的值会发生相应的变化。但是总有一个原则，那就是this指的是调用函数的那个对象 this 一般情况下，是全局对象Global。作为方法调用，那么this就是指这个对象 29. document.write和innerHTML有什么区别？ DOM的innerHTML是DOM元素对象的一个属性 而write是document对象的一个方法 30. JSON是什么？ JSON是一种轻量级的数据交换格式。它是基于JS的一个子集。数据格式简答，易读写，占用带宽小。 {‘age’:12,’name’:’winter’} 31. ajax是什么？ajax的交互模型？同步和异步的区别？ 1.通过异步模式，提升了用户体验 2.优化了浏览器和服务器之间的传输，减少了不必要的数据往返，减少了带宽占用 3.Ajax在客户端运行，承担了一部分本来由服务器承担的工作，减少了大用户量下的服务器负载 二、ajax的最大特点是什么？ Ajax可以实现动态不刷新(局部刷新) 三、ajax的缺点? ajax不支持浏览器的back按钮 安全问题 ajax暴露了与服务器交互的细节 对搜索引擎的支持比较弱 破坏了程序的异常机制 不容易调试 32. 你常用的JS框架33. 工作流程，你怎么来实现页面设计图，你认为前端应该如何高质量的完成工作？34. 介绍项目经验、合作开发、独立开发35. 开发过程中遇到的困难，如何解决？36. 对前端界面工程师这个职位是怎么样理解的？它的前景会是怎么样？前端是最贴近用户的程序员，比后端、数据库、产品经理、运营、安全都近 1、实现界面交互 2、提升用户体验 3、有了Node.js前端可以实现服务端的一些事情 前端是最贴近用户的程序员，前端的能力就是能让产品从90分进化到100分，甚至更好。 参与项目，快速高质量完成实现效果图，精确到1px 参与团队成员，UI设计，产品经理的沟通 做好的页面结构，页面重构和用户体验 处理hack，兼容、写出优美的代码格式 针对服务器的优化、拥抱最新的前端技术 其他相关的加分项 都知道和使用过哪些编辑器，都使用和了解过哪些日常工具？ 都知道有哪些浏览器内核？开发过的项目都兼容哪些浏览器？ 瀑布流布局或者流式布局是否有了解？ HTML5都有哪些新的API？ 都用过什么代码调试工具？ 是否接触或者了解过重构？ 你遇到比较难的技术问题是什么？你是如何解决的？ 什么叫优雅降级和渐进增强？ 优雅降级/平稳退化： Web站点在所有新式浏览器当中都能工作，如果用户使用的是老式浏览器，则代码会检查以确认他们是否能正常工作。由于IE独特的盒模型布局问题，针对不同版本的IE的hack实践过优雅降级了，为那些无法支持功能的浏览器增加候选方案，使之在旧式浏览器上以某种形式降级体验，却不至于完全失效。 渐进增强： 从被所有浏览器支持的基本功能开始，逐步的增加那些只有新式浏览器才支持的功能，向页面增加无害于基础浏览器的额外样式和功能的。当浏览器支持时，它们会自地呈现出来并发挥作用。 跨浏览器，网页性能优化，seo，深刻理解Web标准，对可用性、可访问性等相关知识有实际的了解，包括代码的可维护性、组件的易用性、分层语义模板和浏览器分级支持等。]]></content>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端开发面试题二]]></title>
    <url>%2F2017%2F04%2F24%2F%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95%E9%A2%98%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[HTML 行内元素关注行内置换元素，类似inline-block方式展现 input textarea img select 浏览器内核基于 Webkit:Chrome-blink 、腾讯X5、UC U3 、华为T9 基于 Gecko：Firefox 基于Trident：IE 基于 Presto：Opera 兼备Webkit&amp;Trident：猎豹、360 W3C标准包括结构(xhtml、html)、表现(css)、行为(ecmascript、dom)的标准。更好的规范浏览器渲染页面，使得同一套网页规范尽可能在多套浏览器中表现一致。提高开发者开发效率和用户体验。 Doctype用来告诉浏览器以什么文档类型解析html，没有的话，会按照向下兼容的怪异模式进行解析。 h4及以下需要引用dtd声明，dtd有标准型和过渡性两种。两者区别可忽略 h5不急于SGML标准，因此不需要引用dtd 标签语义化的重要性1.便于浏览器 搜索引擎解析 2.在没CSS情况也以一种文档形式展现，便于阅读 3.有利于SEO 4.有利于代码的阅读和维护 strong与em的异同同：都是对文本起强调作用 异：em以斜体展示文本，strong更利于SEO识别语义 SEO 详细可分为白帽SEO和黑冒SEO SEO的主要方面1.网站标题、关键字、描述(meta) 2.网站结构布局优化：目录层级不要太多，尽量让Spider跳转3次就可以到达网站的任何一个内页 3.网站代码优化 SEO会过滤掉display:none的元素、利用]]></content>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何提升你的面试机会？]]></title>
    <url>%2F2017%2F04%2F24%2F%E5%A6%82%E4%BD%95%E6%8F%90%E5%8D%87%E4%BD%A0%E7%9A%84%E9%9D%A2%E8%AF%95%E6%9C%BA%E4%BC%9A%2F</url>
    <content type="text"><![CDATA[本文转载于stromzhang博客 原文链接 最近太多人给我留言，说投了好多简历石沉大海，杳无音信，感觉都要放弃编程了，还有人给我留言，说自己是培训机构出来的，老师让学生们伪造简历，说大家都这么干的，而自己对伪造简历这种行为很不耻，但是不伪造又很难找到工作，很困惑，不知道该怎么办？好吧，今天我就来给大家写篇文章解答下，顺便教教你们如何提升你的面试机会。 绝不要伪造简历首先说说培训机构教学员伪造简历这件事，貌似现在已经成培训行业潜规则了，培训出来之后教学员伪造简历说 3 年工作经验，这事不是谣言，我自己面试就有亲自经历过。现在大家应该都知道，IT 行业对培训出来的人很抵触，很多企业看到简历上写培训出来的，基本就不考虑了。为什么？难道培训出来的人就低人一等？我想不是，主要就是这个行业环境被培训机构玩坏了。 培训机构基本就是看哪个行业火，哪个行业有利可图，然后疯狂的招生，学费还贵的要死，前两年的移动端开发就是一个鲜活的例子，而如今行业不景气，就开始教学员伪造简历，就在培训的时候做了一些小 demo，简历上能被包装成有过 2、3 年左右的大型项目工作经验，真把企业技术面试官当成跟他们一样傻了？ 可以这么说，有没有过工作经验，什么技术水平，技术面试官问几个问题就基本都清楚了，因为他们面试过太多的人了，见识过各种各样的面试者，技术层面想忽悠过去基本不太可能。当然按照概率的话你是有可能遇到一个人傻钱多的公司，你成功的忽悠过 HR、技术 Leader、CTO、CEO 等，这也算你有本事，但是伪造简历这么低级的行为都没能识破，那这家公司也基本没什么前途了。 伪造简历被识破事小，关键很有可能拉入黑名单。举个例子，如果你投递阿里，被发现伪造简历，那么将拉入黑名单，你之后技术提升了，再想加入阿里可能都没机会了，不止工作经验，简历上你的基本信息、教育经历、工作经历等通通都要真实有效，因为稍微正规点的公司在入职前都会做背景调查，背景调查一方面防止你跟之前公司没有劳务纠纷，另一方面就是为了确保你提供的信息真实有效，往小了说是诚实的问题，往大了说就是人品与价值观的问题，而人品远比技术重要的多的多！ 所以，无论任何时候，都不要伪造自己的简历！ 可以适当的包装下自己的简历一般来说企业的面试流程是由 HR 先筛选一遍简历，然后再把筛选过后的简历提供给技术部门，但是 HR 通常是不懂技术的，所以 HR 筛选简历一般会按照一些硬性的标签进行筛选，比如 「2 年工作经验」、「985/211」、「本科以上」等之类的进行标签筛选，因为通常一份 JD 发出去，招聘网站上会有一大堆简历过来，先由 HR 进行一轮筛选是比较有效的方法，但是必须承认这种粗略的筛选肯定会错过一些人才的，比如确实有一些牛人就不是本科学历，但是无所谓，没有一种办法能百分百的公平，企业会按照他们自己认为最有效的方式进行筛选，也许会错过很多优秀的人才，但是企业只要能找到他需要的人才就行了。 然而很多人可能在第一步 HR 的筛选就被略过了，所以这个时候适当的对简历进行包装下也不是不可以，但注意，适当的包装不是恶意提供虚假信息的伪造，性质上是不一样的。 比如你确实只毕业一年，有一年的工作经验，但是你在毕业之前有过半年多的实习经验，这个时候我觉得可以把实习经验也算作工作经验中来，当然前提是你真的是实习过，而不能伪造你的实习经历。 如果你自认能力特别强，工作经验也可以多说点。比如我曾经见过一个一年工作经验的人，简历上写着 2 年工作经验，我问他：为什么你只毕业一年就有两年的工作经验呢？他回答说：这一年天天在加班，那一年工作经验是加班加出来的。一开始我以为是伪造简历，后来聊了聊发现这人的能力确实很强，而且接触到的领域很广泛，完全不像是一年工作经验的，了解到这一年来他加班不只是单纯的做项目，有时候加班也是在做技术研究，提升自己，这个时候虽然知道他有点伪造简历的嫌疑，但是毕竟能力在这摆着，并没有给人一种很浮夸的感觉。当然，前提是此人能力确实很强，否则的话可能根本不会继续聊下去，所以不要轻易模仿。 另外在项目经验上，很多人说没工作过，简历没有项目经验可写，在简历上项目经验是非常重要的一环，可以说是最重要的一部分，没项目经验在现在的环境很难找到工作，如果真的没项目经验可写，那么完全可以写上自己练手过的项目，或者自己模仿的一些作品，都可以算作项目经验，这也可以算是在可接受的范围内一种包装自己简历的方式。 尽量不要海投大部分人找工作都是在一些招聘网站海投，其实这是很没有效率的一种做法。建议有针对性的投递，比如每次选 10 家看着不错的公司进行投递，没有音信了再选择另外一批，这样做的好处是更加有针对性，于企业、于自己都是更有效率的方式，而且这种方式选择公司环境与岗位职责真的适合自己的企业，另一方面万一第一轮筛选过了，要你去面试也不至于对这家公司一无所知。 一股脑的海投倒是省事了，但是你没有任何准备与期待，自己技能与公司要求不匹配只会浪费双方的时间，这种做法无疑病急乱投医。面试这件事本身是需要你专门花时间去做准备的，准备越充足，机会才能更加青睐于你。 另外，这里推荐大家到一些新兴互联网招聘平台投递，传统招聘平台不管是公司质量还是招聘效率、体验都没法比。这里推荐几个：拉勾、哪上班、简寻、100offer、BOSS直聘等，具体地址请自行搜索。 优先内推其实最快最有效然后又确保百分百不会被 HR 略过你的简历的方式是内推，所以如果你想加入一家公司，你尽量从朋友、同事、学长、朋友的同事的朋友中争取到内推机会，所以这里体现出了你平时的人缘与积累的人脉了。当然内推也只是能保证你的简历一定能被面试官看到而已，但是能不能通过面试还是得看自己的技术能力。 主动自荐如果你没有内推资源，但是又不想跟其他所有人一样海投，那么我建议你主动争取机会，也就是自荐。在了解到一家公司招聘之后，你在网上想办法得到这家公司的技术 Leader 的邮箱，不管是微博、博客、GitHub、还是招聘网站等，总之技术人的邮箱一般还是有办法得到的，发邮件给他，附带上自己的简历。 但是我要提醒你们的是，那些只发自己简历一句话介绍都没的人，基本跟海投一样，机会很渺茫。你应该在邮件的正文里简单的介绍下自己，并且表达对该公司的认可与热情，最好还能了解下该公司的业务，或者对产品提出自己的一些意见，这些都会提高你被技术面试官发现的概率。一般来说，直接发给技术面试官的求职信还是蛮少的，所以这种情况技术面试官都会看一下你的简历的，如果简历符合他们的招聘需求，则会要求 HR 联系你的。 比如，我曾经就收到过一封邮件，邮件里除了他的简历外，还对我家产品提出了非常有价值的建议，一下就吸引了我的注意，后来经过层层面试，技术能力也很不错，在技术能力差不多的情况下，我们优先录取了他。因为对企业来说，直接发给技术面试官自荐信起码说明了自己很主动，还对产品提出了建议，说明了对公司了解很多，做了不少准备工作，如果你还关注了这家公司很长时间，表达出了特别期待加入的热情，通常来说入职自己向往的企业工作后会很有激情，并且很积极主动，很有冲劲，而企业大多都喜欢招聘这样的员工。 最后，以上就是我能想到的能帮助你们在茫茫简历中脱颖而出的一些点，希望能提升点你们的面试机会，祝大家都能找到一份心仪的工作！]]></content>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[wamp下apache2.4.9局域网ip访问时提示403错误]]></title>
    <url>%2F2017%2F04%2F24%2Fwamp%E4%B8%8Bapache2.4.9%E5%B1%80%E5%9F%9F%E7%BD%91ip%E8%AE%BF%E9%97%AE%E6%97%B6%E6%8F%90%E7%A4%BA403%E9%94%99%E8%AF%AF%2F</url>
    <content type="text"><![CDATA[在自己的笔记本上搭建了一个apache服务器，想通过手机访问主机上的一个页面，但是在访问过程中总提示403错误。经过在网上查找别人的解决方案，及不断尝试修改httpd.conf配置文件，最终测试出修改方案。 找到(目录C:\wamp\bin\apache\apache2.4.9\conf下的httpd.conf文件)123&lt;Directory&gt;Require local&lt;/Directory&gt; 将 Require local 修改为 Require all granted 真心是尝试过很多修改方法，网友们也说去修改什么allow from all类似这种，都有尝试过。可能是版本不同吧，本方法经测试OK，希望对大家有帮助。]]></content>
      <tags>
        <tag>wamp</tag>
        <tag>apache</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[有意思语言摘录]]></title>
    <url>%2F2017%2F04%2F24%2F%E6%9C%89%E6%84%8F%E6%80%9D%E8%AF%AD%E8%A8%80%E6%91%98%E5%BD%95%2F</url>
    <content type="text"><![CDATA[1234567891011121314知乎上有网友提问：我读过很多书，但后来大部分都忘记了，那读书有什么用呢？有人说：当我还是个孩子的时候，我吃过很多食物，虽然现在已经记不起来吃过什么了。但可以肯定的是，它们中的一部分已经长成了我的骨头和肉。其实，何止是读书呢？每一次旅行都让我们脚下的路更长更远，每一次尝试都给我们的世界打开一个新的大门，每一段感情都让我们的心灵更加感性丰满。我们的一言一行，所作所为，那些有用的无用的，都在一点点变成我们成长的骨头和肉。 1本人学识渊博、经验丰富，代码风骚、效率恐怖，c/c++、java、php无不精通，熟练掌握各种框架，深山苦练20余年，一天只睡4小时，千里之外定位问题，瞬息之间修复上线。身体强壮、健步如飞，可连续编程100小时不休息，讨论技术方案5小时不喝水，上至带项目、出方案，下至盗账号、威胁pm，啥都能干。泡面矿泉水已备好，学校不支持编程已辍学，家人不支持编程已断绝关系，老婆不支持编程已离婚，小孩不支持编程已送孤儿院，备用电源万兆光纤永不断电断网，门口已埋雷无人打扰 12]]></content>
      <tags>
        <tag>摘录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[有思考的人]]></title>
    <url>%2F2017%2F04%2F24%2F%E6%9C%89%E6%80%9D%E8%80%83%E7%9A%84%E4%BA%BA%2F</url>
    <content type="text"><![CDATA[这几天看了好多技术大牛的博客，颇有感悟，尤以stormzhang和陈三的博客最深刻，知道这帮闷骚的技术男除了每天都在研究技术之外，也在写一些生活中的感悟、撒撒狗粮等等，技术性文章可以慢慢研读，但是看了很多他们对于不同面的一些感悟。的确，我们总得需要有自己的时间可以反省反省自己 明后天坐火车回去，23个小时，希望不要中途歇菜。。。。晚安！！！]]></content>
      <tags>
        <tag>杂文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[无论如何请再坚持下]]></title>
    <url>%2F2017%2F04%2F24%2F%E6%97%A0%E8%AE%BA%E5%A6%82%E4%BD%95%E8%AF%B7%E5%86%8D%E5%9D%9A%E6%8C%81%E4%B8%8B%2F</url>
    <content type="text"><![CDATA[有人告我说，说在大城市找不到工作，生活很困难，要混不下去了，准备回老家发展、找工作去。 不知道有多少人有这样的想法，起码现在的我就有，但是我想告诉你们的是，无论如何，请务必在大城市再坚持下。 没有去过大城市的人，第一印象对大城市的印象是，房价高的离谱，消费高的吓人，节奏快，压力大，心里不理解那些在大城市为了房子打拼一辈子的房奴到底是哪根筋搭错了。没错，在没来上海之前以上也是我心里对大城市的看法，我还心想，估计这辈子都不太可能会在大城市待下去，人活着怎么都是一辈子，为何不能活的潇洒些呢？ 然而，我来到上海之后，包括这些年自己的亲身经历，让我重新认识了我眼中的大城市。 不得不承认，大城市是残酷的。在这里，你没有亲人，甚至没有朋友，你没有任何人可以依靠，生存全靠自己，脱离了家人亲戚的照顾，你从来不会知道生活有多么困难，现在的时代，无论你家里再怎么贫穷，但是在家里呆着，解决温饱绝对没问题。然而在大城市，不工作是真的是会饿死人的，这里干什么都需要钱，没有钱寸步难行，在大城市，你首先考虑的绝不是生活条件的问题，而是生存的问题，在没来上海之前，我从来没法想象租住的房子竟然会这么小，更没法想象会为了省一块钱的交通费，每天都多走将近一个小时的路程，她，就是这般的不近人情。 然而，大城市是公平的。试想下，在老家办事是怎样的？不管是公事私事永远别想按照正常流程办事，想办成事永远都得陪着笑脸，找关系，送礼。不管你在哪个企业工作，人际关系和家族关系基本就是一切，在这里，努力算什么东西，能力算个屁。而在大城市，没人在乎你的家庭背景，人际关系，这里人人平等，你只要有能力，就能得到更多机会，得到应有的回报，再也不用陪着笑脸，在酒桌上谈生意，也许我们一无所有，但是起码我们还可以努力。在这里，即使输你都输的心服口服，因为那些比你强的人往往比你更努力，比你更有能力。 大城市机会更多，而且有志同道合的朋友一起奋斗。很多人觉得在大城市找不到工作，那就回家试试吧。在大城市数以万计的工作机会你都找不到，回家就能轻易找到工作了？当然也许托家里人找点关系，可能会在家里找到工作，而且很有可能是机关部门，拿着那少的可怜的工资，每天上班就是喝茶、聊天、游戏、吃饭、睡觉、上网，可能还需要没事的时候拍拍马屁，你才 20 多岁，这真的就是你想要的生活么？你想找个志同道合的人聊聊互联网，聊聊科技，在别人眼中你就是异类。然而在大城市，你周围身边有各种各样志同道合的小伙伴，他们有着共同的爱好，共同的梦想，可以一起聊互联网、聊产品、聊技术、聊创业，你在这里可以接触各种各样的机会，接触到第一手的信息与技术，身边充斥着各行各业普通的不能再普通的专业人才，无形中会逼着你去学习，去进步，甚至很有可能一起做出一番事业说不定。 当然，如果我家庭条件不错，家族关系还可以，在老家买辆好车，盖栋楼房，娶个姑娘，过着无忧无虑的生活，这是谁都向往的，没有任何一个人愿意背井离乡，远离父母，孤身一人来到陌生的城市打拼，然而我没有这样的家庭条件，我想可能大部分读者都跟我一样，农村出身，家里能供自己上完大学可能就已经是倾尽全力了，我们想要出人头地，回报父母，回报家人，只有靠自己！ 我当然知道北上广房价高的可能一辈子都买不起，买个包子还要排老长的队，坐地铁挤得像汉堡包，买辆车还要摇号，一个破车牌 8 万多块。 我也知道当你一个人遇到事情孤立无援，叫天天不应，叫地地不灵，又不忍让家里人担心，只能擦干眼泪，忍着痛楚，当做什么都没发生的无奈的坚强。 我更知道那个陪你住 800 块一个月的房子，住房面积不过十平米，什么都给不了她，哪怕一句承诺都给不了的，但是依然对你不离不弃的那个女孩子本可以回家过着更好的生活。 也许你现在的生活过的像条狗，也许你现在只拿着月薪 3000 甚至不够温饱的工资，但是我们还年轻，我们选择在大城市奋斗的原因是因为我们期待的是未来，未来更好的职业发展，未来更好的经济收入，未来更好的生活，以及未来无限的可能。 所以，如果你在大城市感觉快要坚持不下去了，我帮不了你们，也没人能帮得了你们，我能做的就是提醒下你们请务必再坚持下，很多事情，很可能就差那多一点的坚持，仅此而已。 其实大城市与小城市只是一个选择的问题而已，无关对错，只是如果你跟我一样是个农村的孩子，试图凭借自己的本事改变自己的生活，那么我建议你一定要到大城市闯闯，她不问你的出生，背景，更不会鄙视你的家庭条件，她只看你是否努力，真的。]]></content>
      <tags>
        <tag>杂文</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用命令行和github交互]]></title>
    <url>%2F2017%2F04%2F24%2F%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%92%8Cgithub%E4%BA%A4%E4%BA%92%2F</url>
    <content type="text"><![CDATA[全局配置1234567初次配置git环境时需要进行的步骤：(配置过之后不需要再次配置)git config --global user.name &quot;Gwemz&quot;git config --global user.email &quot;3396543978@qq.com&quot;git config --global push.default simple clone一个已有的仓库做开发12345678git clone https://github.com/Gwemz/myblog.git .(将项目克隆到当前文件夹下)git --help //git相关命令查询git status //查看项目的状态(是否更新)git add * //添加需要更新的所有内容git status git commit -m &apos;myblog&apos; //每次提交的标注git push //提交(需要输入用户名和密码) 管理分支(除了 https://gwemz.github.io 之外其它 https://gwemz.github.io/myblog 如果需要访问则必须进行下述操作) 1234567git branch gh-pagesgit checkout gh-pagesgit merge mastergit push --set-upstream origin gh-pages 注意 多使用git status 查看自己目前所在的分支]]></content>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hold on or give up!]]></title>
    <url>%2F2017%2F04%2F22%2Fhold%20on%20or%20give%20up%2F</url>
    <content type="text"><![CDATA[前言不知不觉来杭州已经快一个月了，投了不少简历，也面试了一些公司，总体来说，目前还是一名无业游民。说不着急那不太现实，毕竟每天都是开销，吃饭、住宿、交通费用等等，但是感觉着急也没什么用，每天也是稀里糊涂、漫无目的看看别人写的博客，看stormzhang的博客较多,也会帮别人研究研究一些新的知识点，如果感觉自己有什么困惑的时候也会随时记下来，当成自己的一篇博客文章。目的不是为了别人看，而是让自己下一次不要再犯同样的错误，毕竟，在我身上，掉进同一个坑也不是一次两次了。 这段时期也是有很多的感慨，因为有好多同时期的同学，在步入社会后也是在这一时期遇到了各种各样的困惑。在同期接触这一行业的同学中，有的在思维逻辑方面的能力要远胜于自己，但是选择放弃了这一行，因为行业的特殊性对于一个女孩子来说确实很辛苦；做测试的同学告我他经常夹在客户和开发人员中间被各种挑毛病进而两方周旋，也是在考虑要不要换一份工作；工作了一年的同学这段时期也是有的选择离职回家考公务员，有的离职去北上广大城市寻求更大的一个就业机遇；还有的同学正在考虑要不要进入这一行。 说实话，在聊到这类型的话题时，我不知道该怎么回答，因为现在的我也在找工作阶段，我并不是一个过来人，我的困惑甚至可能更多，我只是一只菜鸟，一只也是不知道何去何从的菜鸟。每个行业都有每个行业的苦楚，即将大学毕业的我们也是面临社会生存的等等各种各样压力。每次谈到这样的话题时，我总会说的一句话便是“随着自己的心走，怎么想的就怎么来，只要自己觉得可以就行，没必要考虑别人的想法，因为事情都是我们自己来经历，别人体会不到你的想法，更没有资格发言！” Hold on or give up?坚持还是放弃？谁都不能干涉别人的想法，我想我能做的便是尊重每个不同的意愿，人生这么长，每个人身上都有无数种可能性，那么这一行放弃并不代表人家在另一行业就不能成功。那么对我而言，从内心深处可能还是没有想过放弃，或者是不甘心，可能我这人是比较轴或者是内心还有点盲目的小自信？ 对我而言，作为一名front-end developer，深知自己的欠缺之处，技能方面在业务逻辑处理方面还较差，我想对业务逻辑方面的技能加强是现阶段最先要着手处理的任务。 其次，做事还是有很严重的拖延症，任务一拖再拖，今天的事总是拖到明天或者后天，直到最终截止日期才着急忙慌，这样完成的任务一定不是心里边想要的那个效果，而一个较完美的项目一定是一个耗费很长时间很多心血的项目。 最后，每天的任务没有一个明确的规划，总是想到什么便做什么，由着自己的性子来，经常是这儿看看，那儿看看，到头来发现什么都没解决掉，就像小时候那一只捡了芝麻丢掉西瓜的猴子，到头来什么都没得到。 How to solve it?依照自己所具备的三个不足，提出相应的解决方案，毕竟总得不时的反思自己的功与过，不然永远也没法进步不是么？ 第一、专注自身在业务逻辑方面的培养训练。 第二、每一件任务规定好一个时间段，该工作时工作该娱乐时娱乐，二者最好不要有任何的冲突。 第三、在每一天打开电脑的时候为这一天制定一个工作计划，在晚上工作结束之后再填写填写自己工作的完成情况。]]></content>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
</search>